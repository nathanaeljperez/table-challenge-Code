#include <Servo.h>                            

Servo servoL;                                // left and right servos
Servo servoR;
Int counter;

void setup()
{
  Serial.begin(9600);                        
  servoL.attach(13);                         
  servoR.attach(12);
   
}

void loop()
{
  DDRD |= B11110000;                         // D4-D7 as OUTPUT
  PORTD |= B11110000;                        // D4-D7 to HIGH
  delayMicroseconds(230);                    //  delay to allow capacitor charge in QTI module
  DDRD &= B00001111;                         // D4-D7 as INPUT
  PORTD &= B00001111;                        // D4-D7 to LOW
  delayMicroseconds(230);                    // Short delay
  int pins = PIND;                           // Get values of pins D0-D7
  pins >>= 4;                                // Drop off first four bits of the port; keep only pins D4-D7
  
  Serial.println(pins, BIN);                 // Display result of D4-D7 pins in Serial Monitor
  
  // Determine how to steer based on state of the four QTI sensors
  int vL, vR;
  switch(pins)                               // Compare pins to known line following states
  {
    case B1000:                       
      vL = 25;                             // -100 to 100
      vR = 75;                              // -100:  reverse; 0=stopped; 100= forward
      break;
    case B1100:                        
      vL = 50;
      vR = 75;
      break;
    case B0100:                        
      vL = 75;
      vR = 75;
      break;
    case B0110:                        
      vL = 100;
      vR = 100;
      break;
    case B0010:                        
      vL = 75;
      vR = 75;
      break;
    case B0011:                        
      vL = 75;
      vR = 50;
      break;
    case B0001:                        
      vL = 75;
      vR = 25;
      break;
    case B0000:
      if(counter == 1) {
afterCircle();
}
      if(counter == 2) {
afterRectangle();
}  
break;
  }
  
  servoL.writeMicroseconds(1500 + vL);      // Steer robot to recenter it over the line
  servoR.writeMicroseconds(1500 - vR);
  
  delay(50);                                // Delay for 50 milliseconds (1/20 second)
}

//function after circle
void afterCircle()  {
  
  servoL.writeMicroseconds(1600);
  servoR.writeMicroseconds(1500);
  delay(2000);
  servoL.writeMicroseconds(1500);
  servoR.writeMicroseconds(1500);
  delay(1000);
  servoL.writeMicroseconds(1575);
  servoR.writeMicroseconds(1425);
  delay(2000);
  counter++
}
void afterRectangle() {         //function after the rectangle
servoL.writeMicroseconds(1600);
  servoR.writeMicroseconds(1400);
  delay(500);                     
  servoL.writeMicroseconds(1600);
  servoR.writeMicroseconds(1500);
  delay(1600);
  servoL.writeMicroseconds(1600);
  servoR.writeMicroseconds(1400);
  delay(3700);
   servoL.writeMicroseconds(1500);  //first left
  servoR.writeMicroseconds(1400);
  delay(1600);
  servoL.writeMicroseconds(1600);
  servoR.writeMicroseconds(1400);
  delay(1000);
  servoL.writeMicroseconds(1500);  // left
  servoR.writeMicroseconds(1400);
  delay(1500);
  servoL.writeMicroseconds(1600);
  servoR.writeMicroseconds(1400);
  delay(3700);
  servoL.writeMicroseconds(1600);
  servoR.writeMicroseconds(1500);
  delay(1600);
  servoL.writeMicroseconds(1600);
  servoR.writeMicroseconds(1400);
  delay(1500);
  servoL.writeMicroseconds(1600);
  servoR.writeMicroseconds(1500);
  delay(1500);
  servoL.writeMicroseconds(1600);
  servoR.writeMicroseconds(1400);
  delay(7000);
  servoL.detach();
  servoR.detach();
}
